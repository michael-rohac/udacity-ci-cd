# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

defaults: &defaults
  docker:
    - image: cimg/base:2020.01

commands:
  print_parameter:
    parameters:
      param:
        type: string
    steps:
      - run: echo Parameter ->   << parameters.param >>

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  print-hello:
    <<: *defaults
    steps:
      - run:
          name: "Say hello from bash"
          command: "echo hello"
  generate-and-share-output:
    <<: *defaults
    steps:
      - run: echo "hello world" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
  access-shared-output:
    docker:
      - image: cimg/base:2020.01
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt

  demo-use-of-commands:
    <<: *defaults
    steps:
      - print_parameter:
          param: ${CIRCLE_WORKFLOW_ID}

  echo-env-var:
    docker:
      - image: cimg/base:2020.01
    steps:
      - run:
          name: "Echo MY_ENV_VAR"
          command: echo MY_ENV_VAR - $MY_ENV_VAR

  simulate-failure:
    <<: *defaults
    steps:
      - run: return 1
      - run:
          name: on error
          command: echo "Your pipeline failed"
          when: on_fail

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  env-workflow:
    jobs:
      - echo-env-var
  workspace-workflow:
    jobs:
      - generate-and-share-output
      - access-shared-output:
          requires:
            - generate-and-share-output
  commands-demo:
    jobs:
      - demo-use-of-commands

  errors-demo:
    jobs:
      - simulate-failure